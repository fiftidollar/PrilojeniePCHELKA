export async function GET(req) {
  const { searchParams } = new URL(req.url);
  const code = searchParams.get("code");

  if (!code) {
    return new Response(JSON.stringify({ error: "Missing code" }), { status: 400 });
  }

  try {
    const response = await fetch("https://open-api.tiktok.com/oauth/access_token/", {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: new URLSearchParams({
        client_key: process.env.TIKTOK_CLIENT_KEY,
        client_secret: process.env.TIKTOK_CLIENT_SECRET,
        code,
        grant_type: "authorization_code",
        redirect_uri: process.env.TIKTOK_REDIRECT_URI,
      }),
    });

    const data = await response.json();

    if (data.data?.access_token) {
      // сразу же пробуем получить профиль
      const userResponse = await fetch("https://open-api.tiktok.com/user/info/", {
        method: "POST",
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
        body: new URLSearchParams({
          access_token: data.data.access_token,
          open_id: data.data.open_id, // обязательный параметр
        }),
      });

      const userData = await userResponse.json();

      return new Response(
        JSON.stringify({
          access_token: data.data.access_token,
          refresh_token: data.data.refresh_token,
          user: userData.data,
        }),
        {
          status: 200,
          headers: { "Content-Type": "application/json" },
        }
      );
    } else {
      return new Response(JSON.stringify({ error: data }), { status: 400 });
    }
  } catch (err) {
    return new Response(JSON.stringify({ error: "Failed to exchange token" }), { status: 500 });
  }
}
